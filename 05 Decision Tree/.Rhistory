library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
# Upload data set
name <- file.choose()
rm(list=ls())
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert diagnosis class, 2 for "Benign" and 4 for "Malignant"
data$Class <- factor(data$Class, levels = c("2","4"), labels = c("Benign","Malignant"))
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
set.seed(123)
# Builds a classification tree
model <- rpart(Class~., data = train_data)
rpart.plot(model)
# Predict target class using predict function
predictions <- predict(model, test_data)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(prediction = predictions, class = test_data$Class)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(predictions = predictions, class = test_data$Class)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(predictions = predictions, class = test_data$Class)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(predictions, class = test_data$Class)
print(length(predictions))
print(length(test_data$Class))
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(predictions, test_data$Class)
View(predictions)
# Builds a classification tree
model <- naiveBayes(Class~., data = train_data)
rm(list=ls())
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert diagnosis class, 2 for "Benign" and 4 for "Malignant"
data$Class<- factor(data$Class , levels = c("2","4") , labels = c("Benign","Malignant"))
# load the necessary packages
library(e1071)
library(class)
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
# Implement naiveBayes function
model_naiveBayes <- naiveBayes(Class ~ ., data = train_data)
# Predict target class using predict function
predict_naiveBayes <- predict(model_naiveBayes, test_data)
print(length(predict_naiveBayes))
print(length(test_data$Class))
print(predict_naiveBayes)
View(predict_naiveBayes)
rm(list=ls())
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
# Upload data set
name <- file.choose()
rm(list=ls())
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert diagnosis class, 2 for "Benign" and 4 for "Malignant"
data$Class <- factor(data$Class, levels = c("2","4"), labels = c("Benign","Malignant"))
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
# Builds a classification tree
model <- rpart(Class~., data = train_data)
rpart.plot(model)
# Builds a classification tree
model <- rpart(Class~., data = train_data)
rpart.plot(model)
set.seed(123)
# Builds a classification tree
model <- rpart(Class~., data = train_data)
rpart.plot(model)
# Predict target class using predict function
predictions <- predict(model, test_data)
View(predictions)
print(length(predictions))
print(length(test_data))
print(length(test_data$Class))
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(predictions, class = test_data$Class)
# Predict target class using predict function
predictions <- predict(model, test_data)
#########################################################
##  Step 0: Clear the environment
##
##
#########################################################
rm(list=ls())
library(rpart)
library(rpart.plot)  			# Enhanced tree plots
library(rattle)           # Fancy tree plot
library(RColorBrewer)     # colors needed for rattle
filename<-file.choose()
dsn<-  read.csv(filename )
library(rpart)
set.seed(222)
index<-sort(sample(nrow(dsn),round(.25*nrow(dsn))))
training<-dsn[-index,]
test<-dsn[index,]
CART_class<-rpart( Survived~.,data=training)
rpart.plot(CART_class)
CART_predict2<-predict(CART_class,test, type="class")
table(Actual=test[,4],CART=CART_predict2)
View(CART_predict2)
CART_predict<-predict(CART_class,test)
str(CART_predict)
print(test[,4])
VIew(dsn)
View(dsn)
View(CART_predict)
CART_predict_cat<-ifelse(CART_predict[,1]<=.5,'Yes','No')
View(CART_predict_cat)
rm(list=ls())
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert diagnosis class, 2 for "Benign" and 4 for "Malignant"
data$Class <- factor(data$Class, levels = c("2","4"), labels = c("Benign","Malignant"))
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
set.seed(123)
# Builds a classification tree
model <- rpart(Class~., data = train_data)
rpart.plot(model)
# Predict target class using predict function
predictions <- predict(model, test_data)
print(length(predictions))
print(length(test_data$Class))
CART_predictions <- ifelse(predictions[,1]<=0.5, 'Benign', 'Malignant')
print(length(CART_predictions))
print(length(test_data$Class))
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(predictions, class = test_data$Class)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(CART_predictions, class = test_data$Class)
print(confusion_matrix)
# Compute accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusion_matrix)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(CART_predictions = CART_predictions, class = test_data$Class)
print(confusion_matrix)
# Compute accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusion_matrix)
# Compute error rate
error <- sum(predictions!=test_data$Class)/length(predictions)
print(error * 100)
# Compute error rate
error <- sum(CART_predictions!=test_data$Class)/length(predictions)
print(error * 100)
View(predictions)
CART_predictions <- ifelse(predictions[,1]<=0.5, 'Malignant', 'Benign')
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- table(CART_predictions = CART_predictions, class = test_data$Class)
print(confusion_matrix)
# Compute accuracy
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(confusion_matrix)
# Compute error rate
error <- sum(CART_predictions!=test_data$Class)/length(predictions)
print(error * 100)
# Compute error rate
error <- sum(CART_predictions!=test_data$Class)/length(CART_predictions)
print(error * 100)
