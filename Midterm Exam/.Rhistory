# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- as.numeric(data$Gender)
View(data)
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
View(data)
# KNN Methodology
# Normalize data
normalized_data <- cbind((data[, 2] - min(data[, 2])) / (max(data[, 2]) - min(data[, 2])),
(data[, 3] - min(data[, 3])) / (max(data[, 3]) - min(data[, 3])),
(data[, 4] - min(data[, 4])) / (max(data[, 4]) - min(data[, 4])))
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
View(data)
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:4], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
cl_data <- data['Purchase']
train_data <- normalized_data[split_data, ]
cl_train_data <- cl_data[split_data, ]
test_data <- normalized_data[-split_data, ]
cl_test_data <- cl_data[-split_data, ]
# load the necessary packages
library(class)
(caret)
# load the necessary packages
library(e1071)
library(caret)
# Doing KNN methodology and evaluate the result for k = 3
knn <- knn(train_data, test_data, cl=cl_train_data, k=3)
# Create a confusion matrix to compare the prediction to original data
test_data$Purchase <- factor(test_data$Purchase, levels = c("No", "Yes"))
View(test_data)
confusion_matrix <- confusionMatrix(data = knn, reference = test_data$Purchase)
rm(list=ls())
rm(list=ls())
# Upload data set "CS513_targeting_cat_full.csv"
name <- file.choose()
# Upload data set "CS513_targeting_cat_full.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# load the necessary packages
library(e1071)
library(class)
library(caret)
# Split data into 2 parts: 70% as training data, and 30% as testing data
set.seed(123)
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
View(test_data)
rm(list=ls())
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert diagnosis class, 2 for "Benign" and 4 for "Malignant"
data$Class<- factor(data$Class , levels = c("2","4") , labels = c("Benign","Malignant"))
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:10], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
cl_data <- data['Class']
train_data <- normalized_data[split_data, ]
cl_train_data <- cl_data[split_data, ]
test_data <- normalized_data[-split_data, ]
cl_test_data <- cl_data[-split_data, ]
View(test_data)
View(train_data)
View(normalized_data)
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
View(data)
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:4], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
cl_data <- data['Purchase']
train_data <- normalized_data[split_data, ]
View(cl_data)
View(train_data)
cl_train_data <- cl_data[split_data, ]
test_data <- normalized_data[-split_data, ]
cl_test_data <- cl_data[-split_data, ]
View(test_data)
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
View(data)
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:4], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
set.seed(123)
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
cl_data <- data['Purchase']
train_data <- normalized_data[split_data, ]
cl_train_data <- cl_data[split_data, ]
test_data <- normalized_data[-split_data, ]
cl_test_data <- cl_data[-split_data, ]
# load the necessary packages
library(e1071)
library(class)
library(caret)
# Doing KNN methodology and evaluate the result for k = 3
knn <- knn(train_data, test_data, cl=cl_train_data, k=3)
# Create a confusion matrix to compare the prediction to original data
cl_test_data$Purchase <- factor(cl_test_data$Purchase, levels = c("No", "Yes"))
knn <- factor(knn, levels = c("No", "Yes"))
# Create a confusion matrix to compare the prediction to original data
cl_test_data <- factor(cl_test_data, levels = c("No", "Yes"))
confusion_matrix <- confusionMatrix(data = knn, reference = cl_test_data)
cat(sprintf("Accuracy: %f\n", confusion_matrix$overall['Accuracy']))
cat(sprintf("Precision: %f\n", confusion_matrix$byClass['Precision']))
cat(sprintf("Specificity: %f\n", confusion_matrix$byClass['Specificity']))
cat(sprintf("Recall: %f\n", confusion_matrix$byClass['Recall']))
cat(sprintf("F1 Score: %f\n", confusion_matrix$byClass['F1']))
print(confusion_matrix)
# Create confusion matrix
confusion_matrix <- table(knn, cl_test_data)
print(confusion_matrix)
# Upload data set file "CS513_targeting_num.csv"
name <- file.choose()
# Upload data set file "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
rm(list=ls())
# Upload data set file "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summarize each column of data
summary_data <- summary(data)
summary_data
# Identify missing values
missing_values <- is.na(data)
missing_values
# Replace missing values with the median of the column
for (i in 1:ncol(data)){
column_median <- median(data[, i], na.rm = TRUE)
data[is.na(data[, i]), i] <- column_median
}
View(data)
View(missing_values)
# Display scatter plot of the columns "Age" and "Income"
plot(data$Age,
data$Income,
xlab="Age",
ylab="Income",
main="Scatter plot of Age and Income",
pch=20)
# Display box plots of the columns "Age" and "Income", separately
boxplot(data$Age,
ylab="Age",
main = "Box plot of Age")
boxplot(data$Income,
ylab="Income",
main = "Box plot of Income")
# Display box plots of the columns "Age" and "Income"
boxplot(Age~Income,
data=data,
main="Box plots of Age and Income",
xlab="Income",
ylab="Age",
col="red",
border="black")
rm(list=ls())
# Upload data set file "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summarize each column of data
summary_data <- summary(data)
summary_data
# Identify missing values
missing_values <- is.na(data)
missing_values
# As the above missing values checking, there is only column "Income"
# that contains missing values
# Replace missing values with the median of the column
column_median <- median(data[, 4], na.rm = TRUE)
data[is.na(data[, 4]), 4] <- column_median
View(data)
# Display scatter plot of the columns "Age" and "Income"
plot(data$Age,
data$Income,
xlab="Age",
ylab="Income",
main="Scatter plot of Age and Income",
pch=20)
# Display box plots of the columns "Age" and "Income", separately
boxplot(data$Age,
ylab="Age",
main = "Box plot of Age")
boxplot(data$Income,
ylab="Income",
main = "Box plot of Income")
# Display box plots of the columns "Age" and "Income"
boxplot(Age~Income,
data=data,
main="Box plots of Age and Income",
xlab="Income",
ylab="Age",
col="red",
border="black")
# Identify missing values
missing_values <- is.na(data)
missing_values
View(missing_values)
rm(list=ls())
# Upload data set "CS513_targeting_cat_full.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# load the necessary packages
library(e1071)
library(class)
library(caret)
# Split data into 2 parts: 70% as training data, and 30% as testing data
set.seed(123)
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
# Implement naiveBayes function
model_naiveBayes <- naiveBayes(Purchase ~ ., data = train_data)
# Predict target class using predict function
predict_naiveBayes <- predict(model_naiveBayes, test_data)
# Create a confusion matrix to compare the prediction to original data
test_data$Purchase <- factor(test_data$Purchase, levels = c("No", "Yes"))
predict_naiveBayes <- factor(predict_naiveBayes, levels = c("No", "Yes"))
confusion_matrix <- confusionMatrix(data = predict_naiveBayes, reference = test_data$Purchase)
cat(sprintf("Accuracy: %f\n", confusion_matrix$overall['Accuracy']))
cat(sprintf("Precision: %f\n", confusion_matrix$byClass['Precision']))
cat(sprintf("Specificity: %f\n", confusion_matrix$byClass['Specificity']))
cat(sprintf("Recall: %f\n", confusion_matrix$byClass['Recall']))
cat(sprintf("F1 Score: %f\n", confusion_matrix$byClass['F1']))
print(confusion_matrix)
# Create a confusion matrix to compare the prediction to original data
test_data$Purchase <- factor(test_data$Purchase, levels = c("Yes", "No"))
predict_naiveBayes <- factor(predict_naiveBayes, levels = c("Yes", "No"))
confusion_matrix <- confusionMatrix(data = predict_naiveBayes, reference = test_data$Purchase)
cat(sprintf("Accuracy: %f\n", confusion_matrix$overall['Accuracy']))
cat(sprintf("Precision: %f\n", confusion_matrix$byClass['Precision']))
cat(sprintf("Specificity: %f\n", confusion_matrix$byClass['Specificity']))
cat(sprintf("Recall: %f\n", confusion_matrix$byClass['Recall']))
cat(sprintf("F1 Score: %f\n", confusion_matrix$byClass['F1']))
print(confusion_matrix)
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
View(data)
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:4], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
set.seed(123)
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
cl_data <- data['Purchase']
train_data <- normalized_data[split_data, ]
cl_train_data <- cl_data[split_data, ]
test_data <- normalized_data[-split_data, ]
cl_test_data <- cl_data[-split_data, ]
# load the necessary packages
library(e1071)
library(class)
library(caret)
# Doing KNN methodology and evaluate the result for k = 3
knn <- knn(train_data, test_data, cl=cl_train_data, k=3)
# Create a confusion matrix to compare the prediction to original data
cl_test_data <- factor(cl_test_data, levels = c("Yes", "No"))
knn <- factor(knn, levels = c("Yes", "No"))
confusion_matrix <- confusionMatrix(data = knn, reference = cl_test_data)
cat(sprintf("Accuracy: %f\n", confusion_matrix$overall['Accuracy']))
cat(sprintf("Precision: %f\n", confusion_matrix$byClass['Precision']))
cat(sprintf("Specificity: %f\n", confusion_matrix$byClass['Specificity']))
cat(sprintf("Recall: %f\n", confusion_matrix$byClass['Recall']))
cat(sprintf("F1 Score: %f\n", confusion_matrix$byClass['F1']))
print(confusion_matrix)
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:4], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
set.seed(123)
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
cl_data <- data['Purchase']
train_data <- normalized_data[split_data, ]
cl_train_data <- cl_data[split_data, ]
test_data <- normalized_data[-split_data, ]
cl_test_data <- cl_data[-split_data, ]
# load the necessary packages
library(e1071)
library(class)
library(caret)
# Doing KNN methodology and evaluate the result for k = 3
knn <- knn(train_data, test_data, cl=cl_train_data, k=3)
# Create a confusion matrix to compare the prediction to original data
cl_test_data <- factor(cl_test_data, levels = c("Yes", "No"))
knn <- factor(knn, levels = c("Yes", "No"))
confusion_matrix <- confusionMatrix(data = knn, reference = cl_test_data)
cat(sprintf("Accuracy: %f\n", confusion_matrix$overall['Accuracy']))
cat(sprintf("Precision: %f\n", confusion_matrix$byClass['Precision']))
cat(sprintf("Specificity: %f\n", confusion_matrix$byClass['Specificity']))
cat(sprintf("Recall: %f\n", confusion_matrix$byClass['Recall']))
cat(sprintf("F1 Score: %f\n", confusion_matrix$byClass['F1']))
print(confusion_matrix)
rm(list=ls())
# Upload data set "CS513_targeting_cat_full.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# load the necessary packages
library(e1071)
library(class)
library(caret)
# Split data into 2 parts: 70% as training data, and 30% as testing data
set.seed(123)
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
# Implement naiveBayes function
model_naiveBayes <- naiveBayes(Purchase ~ ., data = train_data)
# Predict target class using predict function
predict_naiveBayes <- predict(model_naiveBayes, test_data)
# Create a confusion matrix to compare the prediction to original data
test_data$Purchase <- factor(test_data$Purchase, levels = c("Yes", "No"))
predict_naiveBayes <- factor(predict_naiveBayes, levels = c("Yes", "No"))
confusion_matrix <- confusionMatrix(data = predict_naiveBayes, reference = test_data$Purchase)
cat(sprintf("Accuracy: %f\n", confusion_matrix$overall['Accuracy']))
cat(sprintf("Precision: %f\n", confusion_matrix$byClass['Precision']))
cat(sprintf("Specificity: %f\n", confusion_matrix$byClass['Specificity']))
cat(sprintf("Recall: %f\n", confusion_matrix$byClass['Recall']))
rm(list=ls())
# Upload data set file "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summarize each column of data
summary_data <- summary(data)
summary_data
# Identify missing values
missing_values <- is.na(data)
missing_values
# As the above missing values checking, there is only column "Income"
# that contains missing values
# Replace missing values with the median of the column
column_median <- median(data[, 4], na.rm = TRUE)
data[is.na(data[, 4]), 4] <- column_median
View(data)
# Display scatter plot of the columns "Age" and "Income"
plot(data$Age,
data$Income,
xlab="Age",
ylab="Income",
main="Scatter plot of Age and Income",
pch=20)
# Display box plots of the columns "Age" and "Income", separately
boxplot(data$Age,
ylab="Age",
main = "Box plot of Age")
# Display scatter plot of the columns "Age" and "Income"
plot(data$Age,
data$Income,
xlab="Age",
ylab="Income",
main="Scatter plot of Age and Income",
pch=20)
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
rm(list=ls())
# Upload data set "CS513_targeting_num.csv"
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Summary data, see the overall of input data
summary(data)
# From summary, we can see that column 'F6' contains missing values
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Convert data in column "Gender", "M" for 1 and "F" for 2
data$Gender <- factor(data$Gender , levels = c("M","F") , labels = c(1, 2))
data$Gender <- as.numeric(data$Gender)
# KNN Methodology
# Normalize data
normalized_data <- apply(data[, 2:4], 2, function(x) (x - min(x)) / (max(x) - min(x)))
View(normalized_data)
