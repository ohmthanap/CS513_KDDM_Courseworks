?hclust
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
colcls=c("diagnosis"="factor")
data <- read.csv(name, header = TRUE, na.strings = '?', colClasses = colcls)
View(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
rm(list=ls())
data(iris)
View(iris)
iris_dist<-dist(iris[,-5])
hclust_resutls<-hclust(iris_dist)
plot(hclust_resutls)
dev.off()
hclust_3<-cutree(hclust_resutls,3)
table(hclust_3,iris[,5])
kmeans_3<- kmeans(iris[,-5],3,nstart = 10)
kmeans_3$cluster
kmeans_3$centers
table(kmeans_3$cluster,iris[,5])
rm(list=ls())
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Hierarchical clustering
# Computes and returns the distance matrix (Exclude column 1 and 2)
data_dist <- dist(data[, 3:ncol(data)])
# Perform Hierarchical clustering
hclust_results <- hclust(data_dist)
View(hclust_results)
plot(hclust_results)
dev.off()
# Cuts a tree from "hclust_results" into 2 groups
hclust_2 <- cutree(hclust_results, 2)
table(hclust_2, data[, 2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
kmeans_2$cluster
kmeans_2$centers
table(cluster=kmeans_2$cluster, data[,2])
table(kmeans_2$cluster, data[,2])
table(hclust_2, data[, 2])
table(k_means_cluster=kmeans_2$cluster, data[,2])
table(h_cluster=hclust_2, data[, 2])
View(hclust_results)
hclust_2[hclust_2==1] <- 'B'
hclust_2[hclust_2==2] <- 'M'
table(h_cluster=hclust_2, data[, 2])
kmeans_2[kmeans_2==1] <- 'B'
kmeans_2[kmeans_2==2] <- 'M'
kmeans_2[kmeans_2$cluster==1] <- 'B'
kmeans_2[kmeans_2$cluster==2] <- 'M'
table(k_means_cluster=kmeans_2$cluster, data[,2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
table(k_means_cluster=kmeans_2$cluster, data[,2])
kmeans_2[kmeans_2$cluster==1] <- 'B'
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
# Cuts a tree from "hclust_results" into 2 groups
hclust_2 <- cutree(hclust_results, 2)
hclust_2[hclust_2==1] <- 'B'
hclust_2[hclust_2==2] <- 'M'
# Cuts a tree from "hclust_results" into 2 groups
hclust_2 <- cutree(hclust_results, 2)
table(h_cluster=hclust_2, data[, 2])
hclust_2[hclust_2==1] <- 'B'
table(h_cluster=hclust_2, data[, 2])
hclust_2[hclust_2==2] <- 'M'
table(h_cluster=hclust_2, data[, 2])
kmeans_2$cluster <- cut(kmeans_2$cluster, breaks = c(1, 2), labels = c('B', 'M'))
View(kmeans_2)
kmeans_2 <- cut(kmeans_2$cluster, breaks = c(0, 1, 2), labels = c('B', 'M'))
table(k_means_cluster=kmeans_2$cluster, data[,2])
table(k_means_cluster=kmeans_2, data[,2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
table(k_means_cluster=kmeans_2, data[,2])
table(k_means_cluster=kmeans_2$cluster, data[,2])
kmeans_reLabel <- cut(kmeans_2$cluster, breaks = c(0, 1, 2), labels = c('B', 'M'))
table(k_means_cluster=kmeans_reLabel, data[,2])
rm(list=ls())
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?')
View(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Hierarchical clustering
# Computes and returns the distance matrix (Exclude column 1 and 2)
data_dist <- dist(data[, 3:ncol(data)])
# Perform Hierarchical clustering
hclust_results <- hclust(data_dist)
plot(hclust_results)
dev.off()
# Cuts a tree from "hclust_results" into 2 groups
hclust_2 <- cutree(hclust_results, 2)
hclust_2[hclust_2==1] <- 'B'
hclust_2[hclust_2==2] <- 'M'
table(h_cluster=hclust_2, data[, 2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
kmeans_2$cluster
kmeans_2$centers
kmeans_reLabel <- cut(kmeans_2$cluster, breaks = c(0, 1, 2), labels = c('B', 'M'))
table(k_means_cluster=kmeans_reLabel, data[,2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
kmeans_2$cluster
kmeans_2$centers
kmeans_reLabel <- cut(kmeans_2$cluster, breaks = c(0, 1, 2), labels = c('B', 'M'))
table(k_means_cluster=kmeans_reLabel, data[,2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
table(k_means_cluster=kmeans$cluster, data[,2])
table(k_means_cluster=kmeans_2$cluster, data[,2])
kmeans_reLabel <- cut(kmeans_2$cluster, breaks = c(0, 1, 2), labels = c('B', 'M'))
# Cuts a tree from "hclust_results" into 2 groups
hclust_2 <- cutree(hclust_results, 2)
table(h_cluster=hclust_2, data[, 2])
# K-Means
# Perform k-means clustering on a data matrix with 2 clusters
kmeans_2 <- kmeans(data[, 3:ncol(data)], centers=2)
kmeans_2$cluster
kmeans_2$centers
table(k_means_cluster=kmeans_2$cluster, data[,2])
rm(list=ls())
colcls=c("diagnosis"="factor")
# Upload data set
name <- file.choose()
data <- read.csv(name, header = TRUE, na.strings = '?', colClasses = colcls)
View(data)
# Identify missing values
missing_values <- is.na(data)
missing_values
# Remove the rows with missing values
data <- na.omit(data)
# Split data into 2 parts: 70% as training data, and 30% as testing data
split_data <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[split_data, ]
test_data <- data[-split_data, ]
# ANN Methodology
# Import necessary library for ANN methodology and evaluation
library("neuralnet")
library(class)
library(caret)
# Set the seed to reproduce a particular sequence of 'random' numbers
set.seed(123)
# Define the neural network architecture (With 5 nodes in the hidden layer)
ann <- neuralnet(diagnosis~., data=train_data[, 2:ncol(train_data)], hidden=5, threshold=0.01)
# Plot the neural network
plot(ann)
# Test the neural network
predictions <- compute(ann, test_data[, 3:ncol(test_data)])
predictions$net.result
predictions_cat <- ifelse(predictions$net.result[, 1] > predictions$net.result[, 2], 'B', 'M')
# Check levels and lengths between predictions_cat and test_data$diagnosis
# Set them to have the same levels and lengths in order to create confusion matrix
predictions_cat <- factor(predictions_cat, levels = c('B', 'M'))
length(predictions_cat)
levels(predictions_cat)
length(test_data$diagnosis)
levels(test_data$diagnosis)
# Create a confusion matrix to compare the prediction to original data
confusion_matrix <- confusionMatrix(data = predictions_cat, reference = test_data$diagnosis)
print(confusion_matrix)
rm(list=ls())
